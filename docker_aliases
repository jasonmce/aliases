# Based on https://gist.githubusercontent.com/cjus/20c2e1026524e83db532b113dce02403/raw/6a3c5d1f822dd1e3094d7cee627afdd059250548/.docker_aliases
# which was explained in the article https://medium.com/@cjus/handy-docker-aliases-4bd85089a3b8

#!/bin/sh

alias dc="docker-compose"
alias dcps="docker-compose ps --format '{{.ID}} ~ {{.Names}} ~ {{.Status}} ~ {{.Image}}'"
alias dcup="docker-compose up"
alias dcupd="docker-compose up -d"

##
# Docker-compose shell.
# Determines the container's shell and opens a command line shell.
dcsh() {
  if [ -z $1 ]; then
    echo "Syntax: dcsh SERVICE"
    return;
  fi

  # If the OS is Alpine use /bin/ash.  Otherwise guess /bin/bash.
  OS=$(dcgetos $1)
  if [[ $OS = *"Alpine"* ]]; then
    echo "Opening an ash shell."
    dc exec $1 /bin/ash
    return
  else
    echo "Opening a bash shell."
    dc exec $1 /bin/bash
  fi
}

##
# Docker-Compose Get OS.
#
# Returns the first line returned from /etc/os-release or /etc/lsb-release.
# Normally this is the PRETTY_NAME value, which is all we will want.
dcgetos() {
  if [ -z $1 ]; then
    echo "Syntax: dcos SERVICE"
    return;
  fi

  # From https://serverfault.com/a/805450
  # Check /etc/os-release for most vendors like Debian, CentOS and Alpine,
  # or /etc/lsb-release for Ubuntu.
  OS=$(docker-compose exec $1 cat /etc/os-release)
  if [ $? == 0 ]; then
    echo  "${OS}" | head -n 1
    return
  fi

  OS=$(docker-compose exec $1 cat /etc/lsb-release)
  if [ -z "${OS}" ]; then
    echo "Could not determine OS?"
    return
  fi
  echo  "${OS}" | head -n 1
}



alias dk='docker'
alias dki='docker images'
alias dks='docker service'
alias dkrm='docker rm'
alias dkl='docker logs'
alias dklf='docker logs -f'
alias dkflush='docker rm `docker ps --no-trunc -aq`'
alias dkflush2='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
alias dkt='docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"'
alias dkps="docker ps --format '{{.ID}} ~ {{.Names}} ~ {{.Status}} ~ {{.Image}}'"

dkln() {
  docker logs -f `docker ps | grep $1 | awk '{print $1}'`
}

dkp() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LABEL="$1/$NAME:$VERSION"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t $LABEL .

  read -p "Press enter to publish"
  docker push $LABEL
}

dkpnc() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LABEL="$1/$NAME:$VERSION"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LABEL .
  read -p "Press enter to publish"
  docker push $LABEL
}

dkpl() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LATEST="$1/$NAME:latest"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LATEST .
  read -p "Press enter to publish"
  docker push $LATEST
}

#dkclean() {
#  docker rm $(docker ps --all -q -f status=exited)
#  docker volume rm $(docker volume ls -qf dangling=true)
#}

#dkprune() {
#  docker system prune -af
#}

dktop() {
  docker stats --format "table {{.Container}}\t{{.Name}}\t{{.CPUPerc}}  {{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
}

dkstats() {
  if [ $# -eq 0 ]
    then docker stats --no-stream;
    else docker stats --no-stream | grep $1;
  fi
}

dke() {
  docker exec -it $1 /bin/sh
}

dkexe() {
  docker exec -it $1 $2
}

dkreboot() {
  osascript -e 'quit app "Docker"'
  countdown 2
  open -a Docker
  echo "Restarting Docker engine"
  countdown 120
}

dkstate() {
  docker inspect $1 | jq .[0].State
}

dksb() {
  docker service scale $1=0
  sleep 2
  docker service scale $1=$2
}

#mongo() {
#  mongoLabel=`docker ps | grep mongo | awk '{print $NF}'`
#  docker exec -it $mongoLabel mongo "$@"
#}

#redis() {
#  redisLabel=`docker ps | grep redis | awk '{print $NF}'`
#  docker exec -it $redisLabel redis-cli
#}
